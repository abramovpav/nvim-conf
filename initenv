#!/bin/bash
export PROJECT_NAME=$1
export PROJECT_PYTHON_IMAGE=$2

# Identifying python version and sitepackages path
GET_PYTHON_SITEPACKAGES_PATH='python -c "import site; print([p for p in site.getsitepackages() if \"site-packages\" in p][0])"'
GET_PYTHON_VERSION='python -c "import sys; print(sys.version.split()[0])"'
CONTAINER_PYTHON_VERSION=$(docker run --rm --name=tmp_for_pyenv --entrypoint=bash "${PROJECT_PYTHON_IMAGE}" -c "${GET_PYTHON_VERSION}")
echo "identified python version ${CONTAINER_PYTHON_VERSION}"
CONTAINER_SITEPACKAGES=$(docker run --rm --name=tmp_for_pyenv --entrypoint=bash "${PROJECT_PYTHON_IMAGE}" -c "${GET_PYTHON_SITEPACKAGES_PATH}")
echo "in-docker sitepackages path ${CONTAINER_SITEPACKAGES}"


echo "Setting up python & virtualenv"
existing_env=$(pyenv prefix $PROJECT_NAME)
if [ $? -eq 0 ]
then 
	echo "dropping existing virtualenv $existing_env"
	pyenv virtualenv-delete -f $PROJECT_NAME
fi
pyenv install -s $CONTAINER_PYTHON_VERSION
pyenv rehash
pyenv virtualenv $CONTAINER_PYTHON_VERSION $PROJECT_NAME

existing_env=$(pyenv prefix $PROJECT_NAME)
echo "Re-created virtual env $existing_env $env_site_packages_path"
env_site_packages_path=$(eval "$existing_env/bin/${GET_PYTHON_SITEPACKAGES_PATH}")


echo "Copying site packages"
id=$(docker create $PROJECT_PYTHON_IMAGE)
docker cp $id:$CONTAINER_SITEPACKAGES/. $env_site_packages_path
docker rm -v $id


echo "Generating tags"
GET_PYTHON_PATHS='import site; import os; [print(p) for p in (site.getsitepackages() + [site.getusersitepackages(), os.path.dirname(os.__file__)])]'
tag_paths=()
for python_path in $("${existing_env}/bin/python" -c "${GET_PYTHON_PATHS}"); do
    echo "generating tags for ${python_path}"
    cd $python_path && ctags -R --languages=python --exclude=site-packages --exclude=test . && cd - > /dev/null 2>&1
    grep -v '/^ ' $python_path/tags > $python_path/tags2
    mv -f $python_path/tags2 $python_path/tags > /dev/null 2>&1
    ls -la $python_path/tags
    tag_paths+=( "${python_path}/tags" )
done
tag_paths=$(IFS=","; echo "${tag_paths[*]}")

echo "Installing Nvim deps"
dev_packages="pynvim \
python-language-server \
pylint \
flake8 \
autoflake \
black \
isort \
pylint-django \
pyls-black \
pyls-isort"
$existing_env/bin/pip install --force-reinstall $dev_packages

echo "Create executable nvim with python binary set"
AUTOGEN_SCRIPTS_DIR="${PWD}/autogen_scripts"
SCRIPT_NAME="nvim_${PROJECT_NAME}"
SCRIPT_PATH="${AUTOGEN_SCRIPTS_DIR}/${SCRIPT_NAME}"

mkdir -p $AUTOGEN_SCRIPTS_DIR
echo "#!/bin/bash
source $existing_env/bin/activate && ~/nvim-osx64/bin/nvim --cmd 'set tags+=$tag_paths' \$@" > "$SCRIPT_PATH"
chmod 0777 "$SCRIPT_PATH"
ln -sf $SCRIPT_PATH "/usr/local/bin/${SCRIPT_NAME}"
echo $SCRIPT_NAME
